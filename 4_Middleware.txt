req------MIDDLEWARE------res
middleware is any function that has access to the req, res, next object

middleware kya h?
jab koi request bhejte h to response aane se pehle kch krna ho:
lets say:
Request comes in--------------
we need to validate the user, sometimes
we need to store some things in the DB
Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware function in the stack.
if there is data from the user we need to parse it and store it
Response goes back--------------

for more details about MIDDLEWARE-https://expressjs.com/en/guide/using-middleware.html
---------------------------------------------------------------
const express = require('express')
const app = express()

app.use((req, res, next) => {
  console.log('Time:', Date.now())
  next()
})

app.listen(3000, () => {
    console.log("server running at http://localhost:3000")
})
----------------------------------------------------------------
// isko smjho - important h! use chatgpt to understand the flow!


import express from 'express';
const app = express();

// Middleware 1 - runs on all routes
function middlewareOne(req, res, next) {
    console.log("Middleware ONE ran");
    next(); // go to the next matching middleware/route
}

// Middleware 2 - only runs on "/about"
function middlewareTwo(req, res, next) {
    console.log("Middleware TWO ran");
    next(); // go to the next matching route
}

// Route handler for "/about"
function aboutRoute(req, res) {
    res.send("This is the ABOUT page");
}

// Apply middlewareOne globally
app.use(middlewareOne);

// Apply middlewareTwo only to "/about"
app.use('/about', middlewareTwo);

// Define route
app.get('/about', aboutRoute);

app.listen(3000, () => {
    console.log("Server running on http://localhost:3000");
});

-----------------------------------------------------------------

🧠 In Short: IMPORTANT!
✅ A middleware "matches" when the request path starts with its path.
✅ A route "matches" when the request path equals the route path and method matches.


You can set, change, or fetch values on the req object in a middleware, 
and any middleware or route that runs after it (in the chain) can access those values

✅ Middleware doesn't "own" the variable
The variable (like req.user) is not limited to just that middleware — it's stored on the req object, which is passed through the entire chain for a single request.

So any downstream middleware or route can access or modify that value.
-----------------------------------------------------------------
const express = require('express');
const app = express();

function logGlobal(req, res, next) {
  console.log("🌍 Global middleware");
  next();
}

function logAdmin(req, res, next) {
  console.log("🛡️ Admin middleware");
  next();
}

function logExact(req, res, next) {
  console.log("📍 Exact /admin only middleware");
  next();
}

app.use(logGlobal);
app.use('/admin', logAdmin);
app.get('/admin', logExact, (req, res) => {
  res.send("🏁 Admin root");
});

app.get('/admin/settings', (req, res) => {
  res.send("⚙️ Admin Settings");
});

app.listen(3000);
---------------------------------------------------------------
function setUser(req, res, next) {
  req.user = { name: "Kenvi" };
  next(); // passes to next middleware or route
}

function greetUser(req, res) {
  res.send(`Hello, ${req.user.name}`);
}

app.use(setUser);
app.get('/', greetUser);
----------------------------------------------------------------













